//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input Actions/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""SoccerPool"",
            ""id"": ""a7e8b98a-baba-440a-b170-929a54ff91c9"",
            ""actions"": [
                {
                    ""name"": ""PrimaryTouch"",
                    ""type"": ""Button"",
                    ""id"": ""60f5a373-a31e-48d1-bb4d-06f91f23d7c2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""318ca305-7460-43c9-b080-d3f5c0b83217"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d13159ef-d15b-48f1-86c7-33a0dd7249eb"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""927a69ec-7274-44ad-8ce3-e95cfc1269e3"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MainMenu"",
            ""id"": ""1b616cd1-ce2e-4bfa-a214-f3d0a0bb8234"",
            ""actions"": [
                {
                    ""name"": ""PrimaryTouch"",
                    ""type"": ""Button"",
                    ""id"": ""c5e4764e-89a4-44a0-8b93-c12949d4877c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4c532093-2b12-48c4-984a-2eac0081ad69"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""563a5b5a-2dc8-4ca5-9529-adee98d737dd"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc71cc1c-0016-4f2f-87a3-4375092c387e"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MiniGolf"",
            ""id"": ""3ba866d6-4297-448c-bab9-2ce210131673"",
            ""actions"": [
                {
                    ""name"": ""PrimaryTouch"",
                    ""type"": ""Button"",
                    ""id"": ""697fb5e6-d811-4a63-b6ab-7eb41fad0a74"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""560451e8-9381-4486-9470-3a639a1b59ce"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""46e9505f-fdd3-4174-b6b8-99c9c9f31429"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52c8c5d0-93ae-4228-9eb2-94007440748c"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Mini Soccer"",
            ""id"": ""2431be8b-f867-40c8-85e6-aefa3800f910"",
            ""actions"": [
                {
                    ""name"": ""Blue Movements"",
                    ""type"": ""PassThrough"",
                    ""id"": ""fd1bcf62-0469-46c3-8264-1b27a4a020de"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Red Movements"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6d225a25-c050-4db9-8d7c-b00411763f4f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c978b6f4-ea8f-49f4-9afb-0be0dcecbe90"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Blue Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1dde5009-205c-4232-9f19-90c45b6f8128"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Red Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BluePlayer"",
            ""id"": ""b4e8cfcc-6337-4c5c-93c0-fbc2427e4eca"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""d435b611-0474-4816-981c-4d8cbf206c79"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7218710b-be1a-454b-bcbf-af2e9a1f4059"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RedPlayer"",
            ""id"": ""ea6d878b-dd70-499e-9b16-60f5a97d2166"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""fb3f4a13-dfc4-4770-ba41-650dd4050bdf"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8d33c53f-5f93-47db-b78e-427e5f99eb6e"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BrickBreaker"",
            ""id"": ""4e90fa7f-3242-4b3f-adde-938d98496634"",
            ""actions"": [
                {
                    ""name"": ""PrimaryTouch"",
                    ""type"": ""PassThrough"",
                    ""id"": ""cca7648b-6739-4009-bdda-1a2483fec19e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimaryPosition"",
                    ""type"": ""Value"",
                    ""id"": ""b87e33e3-8737-4cc9-b38a-675ba099b69c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1433b32c-8506-43f0-b480-1210b72a17c1"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6b46148-45a2-48fe-b1f0-c904b2ca59da"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SoccerPool
        m_SoccerPool = asset.FindActionMap("SoccerPool", throwIfNotFound: true);
        m_SoccerPool_PrimaryTouch = m_SoccerPool.FindAction("PrimaryTouch", throwIfNotFound: true);
        m_SoccerPool_PrimaryPosition = m_SoccerPool.FindAction("PrimaryPosition", throwIfNotFound: true);
        // MainMenu
        m_MainMenu = asset.FindActionMap("MainMenu", throwIfNotFound: true);
        m_MainMenu_PrimaryTouch = m_MainMenu.FindAction("PrimaryTouch", throwIfNotFound: true);
        m_MainMenu_PrimaryPosition = m_MainMenu.FindAction("PrimaryPosition", throwIfNotFound: true);
        // MiniGolf
        m_MiniGolf = asset.FindActionMap("MiniGolf", throwIfNotFound: true);
        m_MiniGolf_PrimaryTouch = m_MiniGolf.FindAction("PrimaryTouch", throwIfNotFound: true);
        m_MiniGolf_PrimaryPosition = m_MiniGolf.FindAction("PrimaryPosition", throwIfNotFound: true);
        // Mini Soccer
        m_MiniSoccer = asset.FindActionMap("Mini Soccer", throwIfNotFound: true);
        m_MiniSoccer_BlueMovements = m_MiniSoccer.FindAction("Blue Movements", throwIfNotFound: true);
        m_MiniSoccer_RedMovements = m_MiniSoccer.FindAction("Red Movements", throwIfNotFound: true);
        // BluePlayer
        m_BluePlayer = asset.FindActionMap("BluePlayer", throwIfNotFound: true);
        m_BluePlayer_Shoot = m_BluePlayer.FindAction("Shoot", throwIfNotFound: true);
        // RedPlayer
        m_RedPlayer = asset.FindActionMap("RedPlayer", throwIfNotFound: true);
        m_RedPlayer_Shoot = m_RedPlayer.FindAction("Shoot", throwIfNotFound: true);
        // BrickBreaker
        m_BrickBreaker = asset.FindActionMap("BrickBreaker", throwIfNotFound: true);
        m_BrickBreaker_PrimaryTouch = m_BrickBreaker.FindAction("PrimaryTouch", throwIfNotFound: true);
        m_BrickBreaker_PrimaryPosition = m_BrickBreaker.FindAction("PrimaryPosition", throwIfNotFound: true);
    }

    ~@PlayerInputActions()
    {
        UnityEngine.Debug.Assert(!m_SoccerPool.enabled, "This will cause a leak and performance issues, PlayerInputActions.SoccerPool.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_MainMenu.enabled, "This will cause a leak and performance issues, PlayerInputActions.MainMenu.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_MiniGolf.enabled, "This will cause a leak and performance issues, PlayerInputActions.MiniGolf.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_MiniSoccer.enabled, "This will cause a leak and performance issues, PlayerInputActions.MiniSoccer.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_BluePlayer.enabled, "This will cause a leak and performance issues, PlayerInputActions.BluePlayer.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_RedPlayer.enabled, "This will cause a leak and performance issues, PlayerInputActions.RedPlayer.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_BrickBreaker.enabled, "This will cause a leak and performance issues, PlayerInputActions.BrickBreaker.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SoccerPool
    private readonly InputActionMap m_SoccerPool;
    private List<ISoccerPoolActions> m_SoccerPoolActionsCallbackInterfaces = new List<ISoccerPoolActions>();
    private readonly InputAction m_SoccerPool_PrimaryTouch;
    private readonly InputAction m_SoccerPool_PrimaryPosition;
    public struct SoccerPoolActions
    {
        private @PlayerInputActions m_Wrapper;
        public SoccerPoolActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryTouch => m_Wrapper.m_SoccerPool_PrimaryTouch;
        public InputAction @PrimaryPosition => m_Wrapper.m_SoccerPool_PrimaryPosition;
        public InputActionMap Get() { return m_Wrapper.m_SoccerPool; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SoccerPoolActions set) { return set.Get(); }
        public void AddCallbacks(ISoccerPoolActions instance)
        {
            if (instance == null || m_Wrapper.m_SoccerPoolActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SoccerPoolActionsCallbackInterfaces.Add(instance);
            @PrimaryTouch.started += instance.OnPrimaryTouch;
            @PrimaryTouch.performed += instance.OnPrimaryTouch;
            @PrimaryTouch.canceled += instance.OnPrimaryTouch;
            @PrimaryPosition.started += instance.OnPrimaryPosition;
            @PrimaryPosition.performed += instance.OnPrimaryPosition;
            @PrimaryPosition.canceled += instance.OnPrimaryPosition;
        }

        private void UnregisterCallbacks(ISoccerPoolActions instance)
        {
            @PrimaryTouch.started -= instance.OnPrimaryTouch;
            @PrimaryTouch.performed -= instance.OnPrimaryTouch;
            @PrimaryTouch.canceled -= instance.OnPrimaryTouch;
            @PrimaryPosition.started -= instance.OnPrimaryPosition;
            @PrimaryPosition.performed -= instance.OnPrimaryPosition;
            @PrimaryPosition.canceled -= instance.OnPrimaryPosition;
        }

        public void RemoveCallbacks(ISoccerPoolActions instance)
        {
            if (m_Wrapper.m_SoccerPoolActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISoccerPoolActions instance)
        {
            foreach (var item in m_Wrapper.m_SoccerPoolActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SoccerPoolActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SoccerPoolActions @SoccerPool => new SoccerPoolActions(this);

    // MainMenu
    private readonly InputActionMap m_MainMenu;
    private List<IMainMenuActions> m_MainMenuActionsCallbackInterfaces = new List<IMainMenuActions>();
    private readonly InputAction m_MainMenu_PrimaryTouch;
    private readonly InputAction m_MainMenu_PrimaryPosition;
    public struct MainMenuActions
    {
        private @PlayerInputActions m_Wrapper;
        public MainMenuActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryTouch => m_Wrapper.m_MainMenu_PrimaryTouch;
        public InputAction @PrimaryPosition => m_Wrapper.m_MainMenu_PrimaryPosition;
        public InputActionMap Get() { return m_Wrapper.m_MainMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainMenuActions set) { return set.Get(); }
        public void AddCallbacks(IMainMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_MainMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainMenuActionsCallbackInterfaces.Add(instance);
            @PrimaryTouch.started += instance.OnPrimaryTouch;
            @PrimaryTouch.performed += instance.OnPrimaryTouch;
            @PrimaryTouch.canceled += instance.OnPrimaryTouch;
            @PrimaryPosition.started += instance.OnPrimaryPosition;
            @PrimaryPosition.performed += instance.OnPrimaryPosition;
            @PrimaryPosition.canceled += instance.OnPrimaryPosition;
        }

        private void UnregisterCallbacks(IMainMenuActions instance)
        {
            @PrimaryTouch.started -= instance.OnPrimaryTouch;
            @PrimaryTouch.performed -= instance.OnPrimaryTouch;
            @PrimaryTouch.canceled -= instance.OnPrimaryTouch;
            @PrimaryPosition.started -= instance.OnPrimaryPosition;
            @PrimaryPosition.performed -= instance.OnPrimaryPosition;
            @PrimaryPosition.canceled -= instance.OnPrimaryPosition;
        }

        public void RemoveCallbacks(IMainMenuActions instance)
        {
            if (m_Wrapper.m_MainMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_MainMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainMenuActions @MainMenu => new MainMenuActions(this);

    // MiniGolf
    private readonly InputActionMap m_MiniGolf;
    private List<IMiniGolfActions> m_MiniGolfActionsCallbackInterfaces = new List<IMiniGolfActions>();
    private readonly InputAction m_MiniGolf_PrimaryTouch;
    private readonly InputAction m_MiniGolf_PrimaryPosition;
    public struct MiniGolfActions
    {
        private @PlayerInputActions m_Wrapper;
        public MiniGolfActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryTouch => m_Wrapper.m_MiniGolf_PrimaryTouch;
        public InputAction @PrimaryPosition => m_Wrapper.m_MiniGolf_PrimaryPosition;
        public InputActionMap Get() { return m_Wrapper.m_MiniGolf; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MiniGolfActions set) { return set.Get(); }
        public void AddCallbacks(IMiniGolfActions instance)
        {
            if (instance == null || m_Wrapper.m_MiniGolfActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MiniGolfActionsCallbackInterfaces.Add(instance);
            @PrimaryTouch.started += instance.OnPrimaryTouch;
            @PrimaryTouch.performed += instance.OnPrimaryTouch;
            @PrimaryTouch.canceled += instance.OnPrimaryTouch;
            @PrimaryPosition.started += instance.OnPrimaryPosition;
            @PrimaryPosition.performed += instance.OnPrimaryPosition;
            @PrimaryPosition.canceled += instance.OnPrimaryPosition;
        }

        private void UnregisterCallbacks(IMiniGolfActions instance)
        {
            @PrimaryTouch.started -= instance.OnPrimaryTouch;
            @PrimaryTouch.performed -= instance.OnPrimaryTouch;
            @PrimaryTouch.canceled -= instance.OnPrimaryTouch;
            @PrimaryPosition.started -= instance.OnPrimaryPosition;
            @PrimaryPosition.performed -= instance.OnPrimaryPosition;
            @PrimaryPosition.canceled -= instance.OnPrimaryPosition;
        }

        public void RemoveCallbacks(IMiniGolfActions instance)
        {
            if (m_Wrapper.m_MiniGolfActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMiniGolfActions instance)
        {
            foreach (var item in m_Wrapper.m_MiniGolfActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MiniGolfActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MiniGolfActions @MiniGolf => new MiniGolfActions(this);

    // Mini Soccer
    private readonly InputActionMap m_MiniSoccer;
    private List<IMiniSoccerActions> m_MiniSoccerActionsCallbackInterfaces = new List<IMiniSoccerActions>();
    private readonly InputAction m_MiniSoccer_BlueMovements;
    private readonly InputAction m_MiniSoccer_RedMovements;
    public struct MiniSoccerActions
    {
        private @PlayerInputActions m_Wrapper;
        public MiniSoccerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @BlueMovements => m_Wrapper.m_MiniSoccer_BlueMovements;
        public InputAction @RedMovements => m_Wrapper.m_MiniSoccer_RedMovements;
        public InputActionMap Get() { return m_Wrapper.m_MiniSoccer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MiniSoccerActions set) { return set.Get(); }
        public void AddCallbacks(IMiniSoccerActions instance)
        {
            if (instance == null || m_Wrapper.m_MiniSoccerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MiniSoccerActionsCallbackInterfaces.Add(instance);
            @BlueMovements.started += instance.OnBlueMovements;
            @BlueMovements.performed += instance.OnBlueMovements;
            @BlueMovements.canceled += instance.OnBlueMovements;
            @RedMovements.started += instance.OnRedMovements;
            @RedMovements.performed += instance.OnRedMovements;
            @RedMovements.canceled += instance.OnRedMovements;
        }

        private void UnregisterCallbacks(IMiniSoccerActions instance)
        {
            @BlueMovements.started -= instance.OnBlueMovements;
            @BlueMovements.performed -= instance.OnBlueMovements;
            @BlueMovements.canceled -= instance.OnBlueMovements;
            @RedMovements.started -= instance.OnRedMovements;
            @RedMovements.performed -= instance.OnRedMovements;
            @RedMovements.canceled -= instance.OnRedMovements;
        }

        public void RemoveCallbacks(IMiniSoccerActions instance)
        {
            if (m_Wrapper.m_MiniSoccerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMiniSoccerActions instance)
        {
            foreach (var item in m_Wrapper.m_MiniSoccerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MiniSoccerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MiniSoccerActions @MiniSoccer => new MiniSoccerActions(this);

    // BluePlayer
    private readonly InputActionMap m_BluePlayer;
    private List<IBluePlayerActions> m_BluePlayerActionsCallbackInterfaces = new List<IBluePlayerActions>();
    private readonly InputAction m_BluePlayer_Shoot;
    public struct BluePlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public BluePlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_BluePlayer_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_BluePlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BluePlayerActions set) { return set.Get(); }
        public void AddCallbacks(IBluePlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_BluePlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BluePlayerActionsCallbackInterfaces.Add(instance);
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(IBluePlayerActions instance)
        {
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(IBluePlayerActions instance)
        {
            if (m_Wrapper.m_BluePlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBluePlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_BluePlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BluePlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BluePlayerActions @BluePlayer => new BluePlayerActions(this);

    // RedPlayer
    private readonly InputActionMap m_RedPlayer;
    private List<IRedPlayerActions> m_RedPlayerActionsCallbackInterfaces = new List<IRedPlayerActions>();
    private readonly InputAction m_RedPlayer_Shoot;
    public struct RedPlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public RedPlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_RedPlayer_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_RedPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RedPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IRedPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_RedPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RedPlayerActionsCallbackInterfaces.Add(instance);
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(IRedPlayerActions instance)
        {
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(IRedPlayerActions instance)
        {
            if (m_Wrapper.m_RedPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRedPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_RedPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RedPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RedPlayerActions @RedPlayer => new RedPlayerActions(this);

    // BrickBreaker
    private readonly InputActionMap m_BrickBreaker;
    private List<IBrickBreakerActions> m_BrickBreakerActionsCallbackInterfaces = new List<IBrickBreakerActions>();
    private readonly InputAction m_BrickBreaker_PrimaryTouch;
    private readonly InputAction m_BrickBreaker_PrimaryPosition;
    public struct BrickBreakerActions
    {
        private @PlayerInputActions m_Wrapper;
        public BrickBreakerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryTouch => m_Wrapper.m_BrickBreaker_PrimaryTouch;
        public InputAction @PrimaryPosition => m_Wrapper.m_BrickBreaker_PrimaryPosition;
        public InputActionMap Get() { return m_Wrapper.m_BrickBreaker; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BrickBreakerActions set) { return set.Get(); }
        public void AddCallbacks(IBrickBreakerActions instance)
        {
            if (instance == null || m_Wrapper.m_BrickBreakerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BrickBreakerActionsCallbackInterfaces.Add(instance);
            @PrimaryTouch.started += instance.OnPrimaryTouch;
            @PrimaryTouch.performed += instance.OnPrimaryTouch;
            @PrimaryTouch.canceled += instance.OnPrimaryTouch;
            @PrimaryPosition.started += instance.OnPrimaryPosition;
            @PrimaryPosition.performed += instance.OnPrimaryPosition;
            @PrimaryPosition.canceled += instance.OnPrimaryPosition;
        }

        private void UnregisterCallbacks(IBrickBreakerActions instance)
        {
            @PrimaryTouch.started -= instance.OnPrimaryTouch;
            @PrimaryTouch.performed -= instance.OnPrimaryTouch;
            @PrimaryTouch.canceled -= instance.OnPrimaryTouch;
            @PrimaryPosition.started -= instance.OnPrimaryPosition;
            @PrimaryPosition.performed -= instance.OnPrimaryPosition;
            @PrimaryPosition.canceled -= instance.OnPrimaryPosition;
        }

        public void RemoveCallbacks(IBrickBreakerActions instance)
        {
            if (m_Wrapper.m_BrickBreakerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBrickBreakerActions instance)
        {
            foreach (var item in m_Wrapper.m_BrickBreakerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BrickBreakerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BrickBreakerActions @BrickBreaker => new BrickBreakerActions(this);
    public interface ISoccerPoolActions
    {
        void OnPrimaryTouch(InputAction.CallbackContext context);
        void OnPrimaryPosition(InputAction.CallbackContext context);
    }
    public interface IMainMenuActions
    {
        void OnPrimaryTouch(InputAction.CallbackContext context);
        void OnPrimaryPosition(InputAction.CallbackContext context);
    }
    public interface IMiniGolfActions
    {
        void OnPrimaryTouch(InputAction.CallbackContext context);
        void OnPrimaryPosition(InputAction.CallbackContext context);
    }
    public interface IMiniSoccerActions
    {
        void OnBlueMovements(InputAction.CallbackContext context);
        void OnRedMovements(InputAction.CallbackContext context);
    }
    public interface IBluePlayerActions
    {
        void OnShoot(InputAction.CallbackContext context);
    }
    public interface IRedPlayerActions
    {
        void OnShoot(InputAction.CallbackContext context);
    }
    public interface IBrickBreakerActions
    {
        void OnPrimaryTouch(InputAction.CallbackContext context);
        void OnPrimaryPosition(InputAction.CallbackContext context);
    }
}
